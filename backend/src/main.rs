mod database;
mod graphql;
mod models;
mod services;

use axum::{
    extract::Extension,
    http::{HeaderValue, Method},
    response::Html,
    routing::{get, post},
    Router,
};
use async_graphql::{http::GraphiQLSource, EmptySubscription, Schema};
use async_graphql_axum::{GraphQLRequest, GraphQLResponse};
use dotenv::dotenv;
use sqlx::SqlitePool;
use tower_http::cors::{Any, CorsLayer};
use std::env;

use graphql::{QueryRoot, MutationRoot};

/// Main application entry point
#[tokio::main]
async fn main() {
    println!("üü° Starting Chess Backend...");

    // Charger les variables d'environnement
    dotenv().ok();
    println!("‚úÖ .env charg√© (ou ignor√© si absent)");

    // R√©cup√©ration des variables
    let cors_origin = env::var("CORS_ORIGIN")
        .unwrap_or_else(|_| {
            println!("‚ö†Ô∏è  CORS_ORIGIN non d√©fini, utilisation de la valeur par d√©faut");
            "http://localhost:5173".to_string()
        });
    println!("üåç CORS_ORIGIN = {}", cors_origin);

    let database_url = env::var("DATABASE_URL")
        .unwrap_or_else(|_| {
            println!("‚ö†Ô∏è  DATABASE_URL non d√©fini, utilisation de la valeur par d√©faut");
            "sqlite:chess.db".to_string()
        });
    println!("üóÑÔ∏è DATABASE_URL = {}", database_url);

    // Connexion √† la base
    println!("‚è≥ Connexion √† la base de donn√©es...");
    let pool = SqlitePool::connect(&database_url)
        .await
        .expect("‚ùå √âchec de la connexion √† la base");
    println!("‚úÖ Connect√© √† la base de donn√©es");

    // Ex√©cution des migrations
    println!("‚è≥ Lancement des migrations...");
    sqlx::migrate!("./migrations")
        .run(&pool)
        .await
        .expect("‚ùå √âchec des migrations");
    println!("‚úÖ Migrations ex√©cut√©es avec succ√®s");

    // Cr√©ation du sch√©ma GraphQL
    println!("‚è≥ Construction du sch√©ma GraphQL...");
    let schema = Schema::build(QueryRoot, MutationRoot, EmptySubscription)
        .data(pool.clone())
        .finish();
    println!("‚úÖ Sch√©ma GraphQL pr√™t");

    // Config CORS
    println!("‚è≥ Configuration CORS...");
    let cors = CorsLayer::new()
        .allow_origin(cors_origin.parse::<HeaderValue>().unwrap())
        .allow_methods([Method::GET, Method::POST])
        .allow_headers(Any);
    println!("‚úÖ CORS configur√©");

    // D√©finition des routes
    println!("‚è≥ Construction des routes...");
    let app = Router::new()
        .route("/", get(graphiql))
        .route("/graphql", post(graphql_handler))
        .layer(Extension(schema))
        .layer(cors);
    println!("‚úÖ Routes pr√™tes");

    // D√©marrage du serveur
    println!("üöÄ Lancement du serveur sur 0.0.0.0:8080...");
    let listener = tokio::net::TcpListener::bind("0.0.0.0:8080").await.unwrap();
    println!("üì° Serveur en √©coute sur http://localhost:8080");
    println!("üìä GraphiQL IDE dispo sur http://localhost:8080");
    println!("üéØ Backend pr√™t √† g√©rer des parties d'√©checs !");
    
    axum::serve(listener, app).await.unwrap();
}

/// Serves the GraphiQL IDE for testing GraphQL queries
async fn graphiql() -> Html<String> {
    Html(GraphiQLSource::build().endpoint("/graphql").finish())
}

/// Handles GraphQL requests
async fn graphql_handler(
    schema: Extension<Schema<QueryRoot, MutationRoot, EmptySubscription>>,
    req: GraphQLRequest,
) -> GraphQLResponse {
    schema.execute(req.into_inner()).await.into()
}

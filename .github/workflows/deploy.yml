name: Deploy to Server

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard
          echo "${{ secrets.WIREGUARD_CONFIG }}" > wg0.conf
          sudo wg-quick up ./wg0.conf

      - name: Copy files to server via SSH
        uses: appleboy/scp-action@v1
        with:
          host: 192.168.1.21
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "backend/Cargo.toml,backend/Cargo.lock,backend/dockerfile,backend/migrations/**,backend/src/**,frontend/**,docker-compose.yml,docker-compose-stockfish.yml,README.md,scripts/**"
          target: "/home/rgeral/chess/chess"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 192.168.1.21
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -euo pipefail
            cd /home/rgeral/chess/chess

            # Ensure VM .env exists with prod overrides
            if [ ! -f .env ]; then
              printf '%s\n' \
                'DATABASE_URL=sqlite:///app/data/chess.db' \
                'CORS_ORIGIN=https://chess.rdevs.fr' \
                'RUST_LOG=info' \
                'RUST_BACKTRACE=1' > .env
            fi

            # Validate compose
            docker-compose -f docker-compose.yml config >/dev/null

            # Stop old stack (ignore errors)
            docker-compose down --remove-orphans || true

            # Build images fresh
            DOCKER_BUILDKIT=1 docker-compose build

            # Run migrations using the new backend image on the prod volume
            docker-compose run --rm \
              -e DATABASE_URL="${DATABASE_URL:-sqlite:///app/data/chess.db}" \
              backend sh -lc 'mkdir -p /app/data && chmod 777 /app/data && sqlx migrate run'

            # Start stack
            docker-compose up -d --remove-orphans

            # Wait for backend health
            for i in $(seq 1 30); do
              cid=$(docker-compose ps -q backend || true)
              [ -n "$cid" ] || { echo 'backend container not found'; sleep 2; continue; }
              st=$(docker inspect -f '{{.State.Health.Status}}' "$cid" 2>/dev/null || echo '')
              [ "$st" = healthy ] && { echo 'Backend healthy'; break; }
              echo "Waiting for backend health ($i)"; sleep 2;
            done

            st=$(docker inspect -f '{{.State.Health.Status}}' $(docker-compose ps -q backend) 2>/dev/null || echo '')
            if [ "$st" != healthy ]; then
              echo 'Backend not healthy â€” logs:' >&2
              docker-compose logs --tail=200 backend || true
              exit 1
            fi

            # Smoke tests through nginx
            curl -fsS -D - -o /dev/null http://127.0.0.1/_app/version.json | head -n1
            curl -fsS -D - -o /dev/null -X POST \
              -H 'Content-Type: application/json' \
              --data '{"query":"{__typename}"}' \
              http://127.0.0.1/graphql | head -n1